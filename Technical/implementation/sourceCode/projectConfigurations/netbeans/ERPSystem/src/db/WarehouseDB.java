/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package db;

import entities.RawMaterial;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 *
 * @author memam
 */
public class WarehouseDB extends ERPSystemDB {

    private static WarehouseDB instance = null;
    private final String USER_NAME = "erpSystemAdmin", PASSWORD = "erp_System_Admin1#";
    private final PreparedStatement selectMaterialsStmt, addNewMaterialStmt;
    private final String SELECT_MATERIALS = "SELECT * FROM RawMaterial;",
            ADD_NEW_MATERIAL = "INSERT INTO RawMaterial (Name, Description, Quantity, Price)"
            + "VALUES (?, ?, ?, ?);";

    private WarehouseDB() throws SQLException {
        conn = DriverManager.getConnection(CONNECTION_URL, USER_NAME, PASSWORD);

        selectMaterialsStmt = conn.prepareStatement(SELECT_MATERIALS);
        addNewMaterialStmt = conn.prepareStatement(ADD_NEW_MATERIAL, Statement.RETURN_GENERATED_KEYS);
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();

        addNewMaterialStmt.close();
        selectMaterialsStmt.close();
    }

    public static synchronized WarehouseDB getInstance() throws SQLException {
        if (instance == null) {
            instance = new WarehouseDB();
        }

        return instance;
    }

    public Map<Integer, RawMaterial> getMaterials() throws SQLException {
        ResultSet rs = selectMaterialsStmt.executeQuery("SELECT * FROM RawMaterial;");

        Map<Integer, RawMaterial> materials = new LinkedHashMap<>();

        while (rs.next()) {
            int id = rs.getInt("ID");
            String name = rs.getString("Name");
            String desc = rs.getString("Description");
            int qty = rs.getInt("Quantity");
            int price = rs.getInt("Price");

            RawMaterial material = new RawMaterial(id, name, desc, qty, price);
            materials.put(id, material);
        }

        return materials;
    }

    public boolean updateMaterialQty(RawMaterial material) throws SQLException {
        boolean updateStatus = false;
        if (selectMaterialsStmt.executeUpdate("UPDATE RawMaterial SET Quantity=" + material.getQty() + " WHERE ID=" + material.getId() + ";") == 1) {
            updateStatus = true;
        }

        return updateStatus;
    }

    public int addNewMaterial(RawMaterial material) throws SQLException {
        addNewMaterialStmt.setString(1, material.getName());
        addNewMaterialStmt.setString(2, material.getDescription());
        addNewMaterialStmt.setInt(3, material.getQty());
        addNewMaterialStmt.setInt(4, (int) material.getPrice());

        addNewMaterialStmt.executeUpdate();

        ResultSet autoGeneratedKeys = addNewMaterialStmt.getGeneratedKeys();
        autoGeneratedKeys.next();
        return autoGeneratedKeys.getInt(1);
    }

}
